import re
import psycopg2
import os
from datetime import datetime, timedelta
import pytz
from typing import Dict, Optional, List
from services.session import get_session, set_session
from services.db import get_categories
import logging

# ÿ™ŸáŸäÿ¶ÿ© ÿßŸÑÿ≥ÿ¨ŸÑ (Logging)
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# ÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ DATABASE_URL ŸÖŸÜ ŸÖÿ™ÿ∫Ÿäÿ±ÿßÿ™ ÿßŸÑÿ®Ÿäÿ¶ÿ©
DB_URL = os.getenv("DATABASE_URL")

def init_reminder_db() -> None:
    """Initialize the database with necessary tables if not already created."""
    conn = None
    try:
        if not DB_URL:
            logging.error("‚ùå DATABASE_URL not set in environment variables.")
            return
        conn = psycopg2.connect(DB_URL)
        cursor = conn.cursor()
        
        # ÿ•ŸÜÿ¥ÿßÿ° ÿ¨ÿØŸàŸÑ reminders
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS reminders (
                id SERIAL PRIMARY KEY,
                user_id TEXT NOT NULL,
                reminder_type TEXT NOT NULL,
                message TEXT,
                remind_at TIMESTAMP NOT NULL,
                interval_days INTEGER DEFAULT 0,
                active BOOLEAN DEFAULT TRUE
            )
        ''')
        
        # ÿ•ŸÜÿ¥ÿßÿ° ÿ¨ÿØŸàŸÑ reminder_stats
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS reminder_stats (
                user_id TEXT PRIMARY KEY,
                reminders_sent INTEGER DEFAULT 0
            )
        ''')
        
        # ÿ•ŸÜÿ¥ÿßÿ° ÿ¨ÿØŸàŸÑ categories
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS categories (
                id SERIAL PRIMARY KEY,
                code TEXT NOT NULL,
                name TEXT NOT NULL,
                description TEXT,
                morning_start_time TEXT,
                morning_end_time TEXT,
                evening_start_time TEXT,
                evening_end_time TEXT,
                emoji TEXT
            )
        ''')

        # ÿ•ÿØÿÆÿßŸÑ ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÅÿ™ÿ±ÿßÿ∂Ÿäÿ© ŸÑŸÑÿµŸäÿØŸÑŸäÿßÿ™ (ŸÑŸÑÿßÿÆÿ™ÿ®ÿßÿ±)
        cursor.execute('''
            INSERT INTO categories (code, name, description, morning_start_time, morning_end_time, evening_start_time, evening_end_time, emoji)
            VALUES 
                ('pharmacy_1', 'ÿµŸäÿØŸÑŸäÿ© ÿßŸÑŸÜŸáÿØŸä', 'ÿµŸäÿØŸÑŸäÿ© ÿ™ŸÇÿØŸÖ ÿÆÿØŸÖÿßÿ™ ÿßŸÑÿ£ÿØŸàŸäÿ© ŸàÿßŸÑŸÖÿ≥ÿ™ŸÑÿ≤ŸÖÿßÿ™ ÿßŸÑÿ∑ÿ®Ÿäÿ©', '08:00', '14:00', '16:00', '22:00', 'üíä'),
                ('pharmacy_2', 'ÿµŸäÿØŸÑŸäÿ© ÿßŸÑÿØŸàÿßÿ°', 'ÿµŸäÿØŸÑŸäÿ© ŸÖÿ™ŸÉÿßŸÖŸÑÿ© ŸÖÿπ ÿÆÿØŸÖÿ© ÿßŸÑÿ™ŸàÿµŸäŸÑ', '09:00', '13:00', '17:00', '23:00', 'üíä')
            ON CONFLICT DO NOTHING
        ''')

        conn.commit()
        logging.info("‚úÖ Database initialized successfully with PostgreSQL")
    except Exception as e:
        logging.error(f"‚ùå Error initializing database: {e}")
    finally:
        if conn is not None:
            conn.close()
            logging.info("üîí Database connection closed during initialization")

def save_reminder(user_id: str, reminder_type: str, message: Optional[str], remind_at: str, interval_days: int = 0) -> bool:
    """Save a new reminder to the database."""
    conn = None
    try:
        if not DB_URL:
            logging.error("‚ùå DATABASE_URL not set in environment variables.")
            return False
        conn = psycopg2.connect(DB_URL)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO reminders (user_id, reminder_type, message, remind_at, interval_days, active)
            VALUES (%s, %s, %s, %s, %s, TRUE)
            RETURNING id
        ''', (user_id, reminder_type, message, remind_at, interval_days))
        reminder_id = cursor.fetchone()[0]
        conn.commit()
        logging.info(f"‚úÖ Reminder saved successfully for user {user_id}, ID: {reminder_id}, Type: {reminder_type}, At: {remind_at}, Interval: {interval_days} days")
        return True
    except Exception as e:
        logging.error(f"‚ùå Error saving reminder for user {user_id}: {e}")
        return False
    finally:
        if conn is not None:
            conn.close()
            logging.info(f"üîí Database connection closed for save_reminder user {user_id}")

def delete_all_reminders(user_id: str) -> bool:
    """Delete all reminders for a user from the database."""
    conn = None
    try:
        if not DB_URL:
            logging.error("‚ùå DATABASE_URL not set in environment variables.")
            return False
        conn = psycopg2.connect(DB_URL)
        cursor = conn.cursor()
        cursor.execute("DELETE FROM reminders WHERE user_id = %s", (user_id,))
        conn.commit()
        logging.info(f"‚úÖ All reminders deleted for user {user_id}")
        return True
    except Exception as e:
        logging.error(f"‚ùå Error deleting reminders for user {user_id}: {e}")
        return False
    finally:
        if conn is not None:
            conn.close()
            logging.info(f"üîí Database connection closed for delete_all_reminders user {user_id}")

def delete_reminder(user_id: str, reminder_id: int) -> bool:
    """Delete a specific reminder for a user."""
    conn = None
    try:
        if not DB_URL:
            logging.error("‚ùå DATABASE_URL not set in environment variables.")
            return False
        conn = psycopg2.connect(DB_URL)
        cursor = conn.cursor()
        cursor.execute("DELETE FROM reminders WHERE user_id = %s AND id = %s", (user_id, reminder_id))
        conn.commit()
        if cursor.rowcount > 0:
            logging.info(f"‚úÖ Reminder {reminder_id} deleted for user {user_id}")
            return True
        else:
            logging.warning(f"‚ùå Reminder {reminder_id} not found for user {user_id}")
            return False
    except Exception as e:
        logging.error(f"‚ùå Error deleting reminder {reminder_id} for user {user_id}: {e}")
        return False
    finally:
        if conn is not None:
            conn.close()
            logging.info(f"üîí Database connection closed for delete_reminder user {user_id}")

def update_reminder(user_id: str, reminder_id: int, remind_at: Optional[str] = None, message: Optional[str] = None, interval_days: Optional[int] = None) -> bool:
    """Update a specific reminder for a user."""
    conn = None
    try:
        if not DB_URL:
            logging.error("‚ùå DATABASE_URL not set in environment variables.")
            return False
        conn = psycopg2.connect(DB_URL)
        cursor = conn.cursor()
        updates = []
        values = []
        if remind_at:
            updates.append("remind_at = %s")
            values.append(remind_at)
        if message is not None:
            updates.append("message = %s")
            values.append(message)
        if interval_days is not None:
            updates.append("interval_days = %s")
            values.append(interval_days)
        if updates:
            values.extend([user_id, reminder_id])
            query = f"UPDATE reminders SET {', '.join(updates)} WHERE user_id = %s AND id = %s"
            cursor.execute(query, values)
            conn.commit()
            if cursor.rowcount > 0:
                logging.info(f"‚úÖ Reminder {reminder_id} updated for user {user_id}")
                return True
            else:
                logging.warning(f"‚ùå Reminder {reminder_id} not found for user {user_id}")
                return False
        else:
            logging.warning(f"‚ùå No updates provided for reminder {reminder_id} for user {user_id}")
            return False
    except Exception as e:
        logging.error(f"‚ùå Error updating reminder {reminder_id} for user {user_id}: {e}")
        return False
    finally:
        if conn is not None:
            conn.close()
            logging.info(f"üîí Database connection closed for update_reminder user {user_id}")

def get_current_reminders(user_id: str) -> List[Dict]:
    """Retrieve all active reminders for a user."""
    conn = None
    try:
        if not DB_URL:
            logging.error("‚ùå DATABASE_URL not set in environment variables.")
            return []
        conn = psycopg2.connect(DB_URL)
        cursor = conn.cursor()
        cursor.execute("SELECT id, reminder_type, message, remind_at, interval_days FROM reminders WHERE user_id = %s AND active = TRUE ORDER BY remind_at", (user_id,))
        reminders = cursor.fetchall()
        result = []
        for reminder in reminders:
            reminder_id, r_type, msg, remind_at, interval_days = reminder
            result.append({
                "id": reminder_id,
                "type": r_type,
                "message": msg if msg else f"ÿ™ÿ∞ŸÉŸäÿ±: {r_type}",
                "remind_at": remind_at.strftime("%Y-%m-%d %H:%M:%S") if isinstance(remind_at, datetime) else str(remind_at),
                "interval_days": interval_days
            })
        return result
    except Exception as e:
        logging.error(f"‚ùå Error retrieving reminders for user {user_id}: {e}")
        return []
    finally:
        if conn is not None:
            conn.close()
            logging.info(f"üîí Database connection closed for get_current_reminders user {user_id}")

def get_user_stats(user_id: str) -> Dict[str, int]:
    """Retrieve user statistics about reminders."""
    conn = None
    try:
        if not DB_URL:
            logging.error("‚ùå DATABASE_URL not set in environment variables.")
            return {"active_count": 0, "sent_count": 0}
        conn = psycopg2.connect(DB_URL)
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM reminders WHERE user_id = %s AND active = TRUE", (user_id,))
        active_count = cursor.fetchone()[0]
        cursor.execute("SELECT reminders_sent FROM reminder_stats WHERE user_id = %s", (user_id,))
        sent_row = cursor.fetchone()
        sent_count = sent_row[0] if sent_row else 0
        return {"active_count": active_count, "sent_count": sent_count}
    except Exception as e:
        logging.error(f"‚ùå Error retrieving stats for user {user_id}: {e}")
        return {"active_count": 0, "sent_count": 0}
    finally:
        if conn is not None:
            conn.close()
            logging.info(f"üîí Database connection closed for get_user_stats user {user_id}")

def parse_date(text: str) -> Optional[str]:
    """Parse date input in formats like '17-08-2025' or '17/08/2025'."""
    try:
        parts = [int(p) for p in re.split(r"[-./_\\\s]+", text.strip()) if p]
        if len(parts) == 3:
            day, month, year = parts
            if year < 100:
                year += 2000
            if 1 <= month <= 12 and 1 <= day <= 31 and year >= datetime.now().year:
                return f"{year}-{month:02d}-{day:02d}"
        return None
    except Exception:
        return None

def parse_time(text: str) -> Optional[str]:
    """Parse time input in formats like '15:30'."""
    try:
        if text.lower() in ["ÿ™ÿÆÿ∑Ÿä", "skip"]:
            return "00:00"
        parts = [int(p) for p in re.split(r"[:\s]+", text.strip()) if p]
        if len(parts) == 2 and 0 <= parts[0] <= 23 and 0 <= parts[1] <= 59:
            hour, minute = parts
            return f"{hour:02d}:{minute:02d}"
        return None
    except Exception:
        return None

def parse_interval_days(text: str) -> int:
    """Parse interval text like 'ŸÉŸÑ ŸäŸàŸÖ' or 'ŸÉŸÑ 3 ÿ£ŸäÿßŸÖ' to number of days."""
    text = text.replace("ÿ£", "ÿß").replace("ÿ•", "ÿß")
    patterns = [
        (r"ŸÉŸÑ\s*(\d*)\s*(ŸäŸàŸÖ|ÿ£ŸäÿßŸÖ|days|day)", lambda m: int(m.group(1)) if m.group(1) else 1),
        (r"ŸÉŸÑ\s*(\d*)\s*(ÿßÿ≥ÿ®Ÿàÿπ|ÿ£ÿ≥ÿßÿ®Ÿäÿπ|weeks|week)", lambda m: int(m.group(1)) * 7 if m.group(1) else 7),
    ]
    for pattern, func in patterns:
        match = re.search(pattern, text)
        if match:
            days = func(match)
            logging.info(f"üîÅ Parsed interval '{text}' as {days} days")
            return days
    return 0  # Default to 0 (no repeat) if no valid interval is found

def get_main_menu_response() -> Dict[str, str]:
    """Return the main menu text and keyboard."""
    main_menu_text = "*_ÿ£ŸáŸÑÿß ÿ®ŸÉ ŸÅŸä ÿØŸÑŸäŸÑ ÿÆÿØŸÖÿßÿ™ ÿßŸÑŸÇÿ±ŸäŸÜ ŸäŸÖŸÉŸÜŸÉ ÿßŸÑÿ•ÿ≥ÿ™ÿπŸÑÿßŸÖ ÿπŸÜ ÿßŸÑÿÆÿØŸÖÿßÿ™ ÿßŸÑÿ™ÿßŸÑŸäÿ©:_*\n\n"
    main_menu_text += "1Ô∏è‚É£ ÿ≠ŸÉŸàŸÖŸäüè¢\n"
    main_menu_text += "2Ô∏è‚É£ ÿµŸäÿØŸÑŸäÿ©üíä\n"
    main_menu_text += "3Ô∏è‚É£ ÿ®ŸÇÿßŸÑÿ©ü•§\n"
    main_menu_text += "4Ô∏è‚É£ ÿÆÿ∂ÿßÿ±ü•¨\n"
    main_menu_text += "5Ô∏è‚É£ ÿ±ÿ≠ŸÑÿßÿ™‚õ∫Ô∏è\n"
    main_menu_text += "6Ô∏è‚É£ ÿ≠ŸÑÿßüçÆ\n"
    main_menu_text += "7Ô∏è‚É£ ÿ£ÿ≥ÿ± ŸÖŸÜÿ™ÿ¨ÿ©ü•ß\n"
    main_menu_text += "8Ô∏è‚É£ ŸÖÿ∑ÿßÿπŸÖüçî\n"
    main_menu_text += "9Ô∏è‚É£ ŸÇÿ±ÿ∑ÿßÿ≥Ÿäÿ©üìó\n"
    main_menu_text += "üîü ŸÖÿ≠ŸÑÿßÿ™üè™\n"
    main_menu_text += "----\n"
    main_menu_text += "11- ÿ¥ÿßŸÑŸäÿ©\n"
    main_menu_text += "12- ŸàÿßŸäÿ™\n"
    main_menu_text += "13- ÿ¥ŸäŸàŸÑ\n"
    main_menu_text += "14- ÿØŸÅÿßŸÜ\n"
    main_menu_text += "15- ŸÖŸàÿßÿØ ÿ®ŸÜÿßÿ° ŸàÿπŸàÿßÿ≤ŸÑ\n"
    main_menu_text += "16- ÿπŸÖÿßŸÑ\n"
    main_menu_text += "17- ŸÖÿ≠ŸÑÿßÿ™ ŸÖŸáŸÜŸäÿ©\n"
    main_menu_text += "18- ÿ∞ÿ®ÿßÿ¶ÿ≠ ŸàŸÖŸÑÿßÿ≠ŸÖ\n"
    main_menu_text += "19- ŸÜŸÇŸÑ ŸÖÿØÿ±ÿ≥Ÿä ŸàŸÖÿ¥ÿßŸàŸäÿ±\n"
    main_menu_text += "20- ŸÖŸÜÿ®Ÿá‚è∞\n\n"
    main_menu_text += "üìù *ÿ£ÿ±ÿ≥ŸÑ ÿ±ŸÇŸÖ ÿ£Ÿà ÿßÿ≥ŸÖ ÿßŸÑÿÆÿØŸÖÿ© ŸÖÿ®ÿßÿ¥ÿ±ÿ© ŸÑÿπÿ±ÿ∂ ÿßŸÑÿ™ŸÅÿßÿµŸäŸÑ.*"
    keyboard = "ÿ≠ŸÉŸàŸÖŸä||ÿµŸäÿØŸÑŸäÿ©||ÿ®ŸÇÿßŸÑÿ©||ÿÆÿ∂ÿßÿ±||ÿ±ÿ≠ŸÑÿßÿ™||ÿ≠ŸÑÿß||ÿ£ÿ≥ÿ± ŸÖŸÜÿ™ÿ¨ÿ©||ŸÖÿ∑ÿßÿπŸÖ||ŸÇÿ±ÿ∑ÿßÿ≥Ÿäÿ©||ŸÖÿ≠ŸÑÿßÿ™||ÿ¥ÿßŸÑŸäÿ©||ŸàÿßŸäÿ™||ÿ¥ŸäŸàŸÑ||ÿØŸÅÿßŸÜ||ŸÖŸàÿßÿØ ÿ®ŸÜÿßÿ° ŸàÿπŸàÿßÿ≤ŸÑ||ÿπŸÖÿßŸÑ||ŸÖÿ≠ŸÑÿßÿ™ ŸÖŸáŸÜŸäÿ©||ÿ∞ÿ®ÿßÿ¶ÿ≠ ŸàŸÖŸÑÿßÿ≠ŸÖ||ŸÜŸÇŸÑ ŸÖÿØÿ±ÿ≥Ÿä ŸàŸÖÿ¥ÿßŸàŸäÿ±||ŸÖŸÜÿ®Ÿá"
    return {"text": main_menu_text, "keyboard": keyboard}

def get_reminder_menu_response() -> Dict[str, str]:
    """Return the reminder menu text and keyboard."""
    reminder_menu_text = "‚è∞ *ŸÖŸÜÿ®Ÿá*\n\n"
    reminder_menu_text += "ÿßÿÆÿ™ÿ± ŸÜŸàÿπ ÿßŸÑÿ™ÿ∞ŸÉŸäÿ± ÿßŸÑÿ∞Ÿä ÿ™ÿ±ŸäÿØŸá:\n\n"
    reminder_menu_text += "1Ô∏è‚É£ ŸÖŸàÿπÿØ ŸÖÿ≥ÿ™ÿ¥ŸÅŸâ ÿ£Ÿà ŸÖŸÜÿßÿ≥ÿ®ÿ©\n"
    reminder_menu_text += "2Ô∏è‚É£ ÿ™ÿ∞ŸÉŸäÿ± ŸäŸàŸÖŸä\n"
    reminder_menu_text += "3Ô∏è‚É£ ÿ™ÿ∞ŸÉŸäÿ± ÿ£ÿ≥ÿ®ŸàÿπŸä\n"
    reminder_menu_text += "4Ô∏è‚É£ ÿ™ŸÜÿ®ŸäŸáÿßÿ™Ÿä ÿßŸÑÿ≠ÿßŸÑŸäÿ©\n"
    reminder_menu_text += "5Ô∏è‚É£ ÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™Ÿä\n\n"
    reminder_menu_text += "‚ùå ŸÑÿ≠ÿ∞ŸÅ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ™ŸÜÿ®ŸäŸáÿßÿ™ ÿ£ÿ±ÿ≥ŸÑ: ÿ≠ÿ∞ŸÅ\n"
    reminder_menu_text += "‚Ü©Ô∏è ŸÑŸÑÿ±ÿ¨Ÿàÿπ (00) | üè† ÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (0)"
    keyboard = "1||2||3||4||5"
    return {"text": reminder_menu_text, "keyboard": keyboard}

def handle(chat_id: str, message_text: str) -> Dict[str, str]:
    """
    Handle user commands and navigate through menus in the chat.
    Returns a dictionary with response message and optional custom keyboard.
    """
    user_id = chat_id
    response = {"text": "ŸÑŸÖ ÿ£ŸÅŸáŸÖ ÿ∑ŸÑÿ®ŸÉ. ÿ≠ÿßŸàŸÑ ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ.", "keyboard": ""}
    
    # ÿ¨ŸÑÿ® ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ¨ŸÑÿ≥ÿ© (ŸÇÿØ ÿ™ŸÉŸàŸÜ ŸÅÿßÿ±ÿ∫ÿ©)
    session_data = get_session(user_id)
    if session_data is None:
        session_data = {}
        set_session(user_id, session_data)
    
    current_state = session_data.get("state", "")
    
    # ÿπÿ±ÿ∂ ÿßŸÑŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ© ÿ™ŸÑŸÇÿßÿ¶ŸäŸãÿß ÿπŸÜÿØ ÿ®ÿØÿ° ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ©
    if not current_state and not session_data.get("welcome_sent", False):
        session_data["state"] = "main_menu"
        session_data["welcome_sent"] = True
        set_session(user_id, session_data)
        return get_main_menu_response()

    # ÿßŸÑÿ™ÿπÿßŸÖŸÑ ŸÖÿπ ÿßŸÑŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (ÿπÿ±ÿ∂Ÿáÿß ÿπŸÜÿØ ÿßŸÑÿ∑ŸÑÿ®)
    if message_text in ["0", "Ÿ†", "ÿµŸÅÿ±", ".", "ŸÜŸÇÿ∑ÿ©", "ŸÜŸÇÿ∑Ÿá", "ÿÆÿØŸÖÿßÿ™", "ŸÇÿßÿ¶ŸÖÿ©", "menu", "main menu", "ÿßŸÑÿπŸàÿØÿ©", "ÿ±ÿ¨Ÿàÿπ"]:
        session_data["state"] = "main_menu"
        set_session(user_id, session_data)
        return get_main_menu_response()
    
    # ÿßŸÑÿ™ÿπÿßŸÖŸÑ ŸÖÿπ ÿßŸÑÿπŸàÿØÿ© ÿ•ŸÑŸâ ÿßŸÑÿÆÿ∑Ÿàÿ© ÿßŸÑÿ≥ÿßÿ®ŸÇÿ© ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ "00"
    if message_text == "00":
        if current_state == "reminder_menu":
            session_data["state"] = "main_menu"
            set_session(user_id, session_data)
            return get_main_menu_response()
        elif current_state == "awaiting_reminder_date":
            session_data["state"] = "reminder_menu"
            set_session(user_id, session_data)
            return get_reminder_menu_response()
        elif current_state == "awaiting_reminder_time":
            session_data["state"] = "awaiting_reminder_date"
            set_session(user_id, session_data)
            reminder_type = session_data.get("reminder_type", "ŸÖŸàÿπÿØ")
            response = {"text": f"üìÖ ÿ£ÿ±ÿ≥ŸÑ ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿ™ÿ∞ŸÉŸäÿ± ŸÑŸÄ '{reminder_type}' ÿ®ÿßŸÑŸÖŸäŸÑÿßÿØŸä:\nŸÖÿ´ŸÑ: 17-08-2025\n\n‚Ü©Ô∏è ŸÑŸÑÿ±ÿ¨Ÿàÿπ (00) | üè† ÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (0)", "keyboard": ""}
        elif current_state == "awaiting_reminder_message":
            session_data["state"] = "awaiting_reminder_time"
            set_session(user_id, session_data)
            reminder_type = session_data.get("reminder_type", "ŸÖŸàÿπÿØ")
            response = {"text": f"‚è∞ ÿ£ÿØÿÆŸÑ ŸàŸÇÿ™ ÿßŸÑÿ™ÿ∞ŸÉŸäÿ± ŸÑŸÄ '{reminder_type}' ÿ®ÿßŸÑÿµŸäÿ∫ÿ© HH:MM (24 ÿ≥ÿßÿπÿ©):\nŸÖÿ´ŸÑ: 15:30\n\n‚Ü©Ô∏è ŸÑŸÑÿ±ÿ¨Ÿàÿπ (00) | üè† ÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (0)", "keyboard": ""}
        elif current_state == "awaiting_reminder_interval":
            session_data["state"] = "awaiting_reminder_message"
            set_session(user_id, session_data)
            response = {"text": "üìù ŸáŸÑ ÿ™ÿ±ŸäÿØ ÿ•ÿ∂ÿßŸÅÿ© ÿ±ÿ≥ÿßŸÑÿ© ŸÖÿÆÿµÿµÿ© ŸÑŸÑÿ™ÿ∞ŸÉŸäÿ±ÿü ÿ•ÿ∞ÿß ŸÑÿßÿå ÿßŸÉÿ™ÿ® 'ŸÑÿß' ÿ£Ÿà 'ÿ™ÿÆÿ∑Ÿä'.", "keyboard": ""}
        elif current_state == "awaiting_delete_reminder_id":
            session_data["state"] = "reminder_menu"
            set_session(user_id, session_data)
            return get_reminder_menu_response()
        elif current_state == "awaiting_edit_reminder_id":
            session_data["state"] = "reminder_menu"
            set_session(user_id, session_data)
            return get_reminder_menu_response()
        elif current_state == "awaiting_edit_reminder_date":
            session_data["state"] = "awaiting_edit_reminder_id"
            set_session(user_id, session_data)
            response = {"text": "üìù ÿ£ÿ±ÿ≥ŸÑ ÿ±ŸÇŸÖ ÿßŸÑÿ™ÿ∞ŸÉŸäÿ± ÿßŸÑÿ∞Ÿä ÿ™ÿ±ŸäÿØ ÿ™ÿπÿØŸäŸÑŸá (ŸÖÿ´ŸÑ: 1).\n\n‚Ü©Ô∏è ŸÑŸÑÿ±ÿ¨Ÿàÿπ (00) | üè† ÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (0)", "keyboard": ""}
        elif current_state == "awaiting_edit_reminder_time":
            session_data["state"] = "awaiting_edit_reminder_date"
            set_session(user_id, session_data)
            response = {"text": "üìÖ ÿ£ÿØÿÆŸÑ ÿ™ÿßÿ±ŸäÿÆ ÿ¨ÿØŸäÿØ ŸÑŸÑÿ™ÿ∞ŸÉŸäÿ± ÿ®ÿßŸÑŸÖŸäŸÑÿßÿØŸä (ÿ£Ÿà 'ÿ™ÿÆÿ∑Ÿä' ŸÑŸÑÿßÿ≠ÿ™ŸÅÿßÿ∏ ÿ®ÿßŸÑÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿ≠ÿßŸÑŸä):\nŸÖÿ´ŸÑ: 17-08-2025\n\n‚Ü©Ô∏è ŸÑŸÑÿ±ÿ¨Ÿàÿπ (00) | üè† ÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (0)", "keyboard": ""}
        elif current_state == "awaiting_edit_reminder_message":
            session_data["state"] = "awaiting_edit_reminder_time"
            set_session(user_id, session_data)
            response = {"text": "‚è∞ ÿ£ÿØÿÆŸÑ ŸàŸÇÿ™ ÿßŸÑÿ™ÿ∞ŸÉŸäÿ± ÿßŸÑÿ¨ÿØŸäÿØ ÿ®ÿßŸÑÿµŸäÿ∫ÿ© HH:MM (24 ÿ≥ÿßÿπÿ©):\nŸÖÿ´ŸÑ: 15:30 ÿ£Ÿà ÿ£ÿ±ÿ≥ŸÑ 'ÿ™ÿÆÿ∑Ÿä' ŸÑŸÑÿßÿ≠ÿ™ŸÅÿßÿ∏ ÿ®ÿßŸÑŸàŸÇÿ™ ÿßŸÑÿ≠ÿßŸÑŸä\n\n‚Ü©Ô∏è ŸÑŸÑÿ±ÿ¨Ÿàÿπ (00) | üè† ÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (0)", "keyboard": ""}
        elif current_state == "awaiting_edit_reminder_interval":
            session_data["state"] = "awaiting_edit_reminder_message"
            set_session(user_id, session_data)
            response = {"text": "üìù ÿ£ÿØÿÆŸÑ ÿ±ÿ≥ÿßŸÑÿ© ŸÖÿÆÿµÿµÿ© ÿ¨ÿØŸäÿØÿ© ŸÑŸÑÿ™ÿ∞ŸÉŸäÿ± (ÿßÿÆÿ™Ÿäÿßÿ±Ÿäÿå ÿ£ÿ±ÿ≥ŸÑ 'ÿ™ÿÆÿ∑Ÿä' ŸÑŸÑÿßÿ≠ÿ™ŸÅÿßÿ∏ ÿ®ÿßŸÑÿ±ÿ≥ÿßŸÑÿ© ÿßŸÑÿ≠ÿßŸÑŸäÿ©):\nŸÖÿ´ŸÑ: ŸÑÿß ÿ™ŸÜÿ≥Ÿé ÿ≤Ÿäÿßÿ±ÿ© ÿßŸÑÿ∑ÿ®Ÿäÿ®\n\n‚Ü©Ô∏è ŸÑŸÑÿ±ÿ¨Ÿàÿπ (00) | üè† ÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (0)", "keyboard": ""}
        elif current_state.startswith("sub_service_"):
            session_data["state"] = "main_menu"
            set_session(user_id, session_data)
            return get_main_menu_response()
        elif current_state.startswith("service_"):
            session_data["state"] = "main_menu"
            set_session(user_id, session_data)
            return get_main_menu_response()
        else:
            response = {"text": "ÿ£ŸÜÿ™ ÿ®ÿßŸÑŸÅÿπŸÑ ŸÅŸä ÿßŸÑŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©. ÿßŸÉÿ™ÿ® 'ŸÇÿßÿ¶ŸÖÿ©' ÿ£Ÿà '0' ŸÑÿπÿ±ÿ∂ ÿßŸÑÿÆŸäÿßÿ±ÿßÿ™.", "keyboard": ""}
        return response

    # ÿßŸÑÿ™ÿπÿßŸÖŸÑ ŸÖÿπ ÿßÿÆÿ™Ÿäÿßÿ±ÿßÿ™ ÿßŸÑŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©
    if current_state == "main_menu" or message_text in ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20",
                                                        "ÿ≠ŸÉŸàŸÖŸä", "ÿµŸäÿØŸÑŸäÿ©", "ÿ®ŸÇÿßŸÑÿ©", "ÿÆÿ∂ÿßÿ±", "ÿ±ÿ≠ŸÑÿßÿ™", "ÿ≠ŸÑÿß", "ÿ£ÿ≥ÿ± ŸÖŸÜÿ™ÿ¨ÿ©", "ŸÖÿ∑ÿßÿπŸÖ", "ŸÇÿ±ÿ∑ÿßÿ≥Ÿäÿ©", "ŸÖÿ≠ŸÑÿßÿ™",
                                                        "ÿ¥ÿßŸÑŸäÿ©", "ŸàÿßŸäÿ™", "ÿ¥ŸäŸàŸÑ", "ÿØŸÅÿßŸÜ", "ŸÖŸàÿßÿØ ÿ®ŸÜÿßÿ° ŸàÿπŸàÿßÿ≤ŸÑ", "ÿπŸÖÿßŸÑ", "ŸÖÿ≠ŸÑÿßÿ™ ŸÖŸáŸÜŸäÿ©", "ÿ∞ÿ®ÿßÿ¶ÿ≠ ŸàŸÖŸÑÿßÿ≠ŸÖ", "ŸÜŸÇŸÑ ŸÖÿØÿ±ÿ≥Ÿä ŸàŸÖÿ¥ÿßŸàŸäÿ±", "ŸÖŸÜÿ®Ÿá"]:
        service_mapping = {
            "1": "ÿ≠ŸÉŸàŸÖŸä", "2": "ÿµŸäÿØŸÑŸäÿ©", "3": "ÿ®ŸÇÿßŸÑÿ©", "4": "ÿÆÿ∂ÿßÿ±", "5": "ÿ±ÿ≠ŸÑÿßÿ™",
            "6": "ÿ≠ŸÑÿß", "7": "ÿ£ÿ≥ÿ± ŸÖŸÜÿ™ÿ¨ÿ©", "8": "ŸÖÿ∑ÿßÿπŸÖ", "9": "ŸÇÿ±ÿ∑ÿßÿ≥Ÿäÿ©", "10": "ŸÖÿ≠ŸÑÿßÿ™",
            "11": "ÿ¥ÿßŸÑŸäÿ©", "12": "ŸàÿßŸäÿ™", "13": "ÿ¥ŸäŸàŸÑ", "14": "ÿØŸÅÿßŸÜ", "15": "ŸÖŸàÿßÿØ ÿ®ŸÜÿßÿ° ŸàÿπŸàÿßÿ≤ŸÑ",
            "16": "ÿπŸÖÿßŸÑ", "17": "ŸÖÿ≠ŸÑÿßÿ™ ŸÖŸáŸÜŸäÿ©", "18": "ÿ∞ÿ®ÿßÿ¶ÿ≠ ŸàŸÖŸÑÿßÿ≠ŸÖ", "19": "ŸÜŸÇŸÑ ŸÖÿØÿ±ÿ≥Ÿä ŸàŸÖÿ¥ÿßŸàŸäÿ±", "20": "ŸÖŸÜÿ®Ÿá"
        }
        selected_service = None
        # ÿ™ÿ≠ÿØŸäÿØ ÿßŸÑÿÆÿØŸÖÿ© ÿ®ŸÜÿßÿ°Ÿã ÿπŸÑŸâ ÿßŸÑÿ±ŸÇŸÖ ÿ£Ÿà ÿßŸÑÿßÿ≥ŸÖ
        if message_text in service_mapping:
            selected_service = service_mapping[message_text]
        else:
            for service_name in service_mapping.values():
                if service_name in message_text or message_text.lower() in service_name.lower():
                    selected_service = service_name
                    break
        
        if selected_service:
            if selected_service == "ŸÖŸÜÿ®Ÿá":
                session_data["state"] = "reminder_menu"
                set_session(user_id, session_data)
                return get_reminder_menu_response()
            elif selected_service == "ÿµŸäÿØŸÑŸäÿ©":
                session_data["state"] = f"service_{selected_service}"
                set_session(user_id, session_data)
                categories = get_categories()
                pharmacies = [cat for cat in categories if "pharmacy" in cat.get("code", "").lower()]
                if not pharmacies:
                    response_text = "üè• ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿµŸäÿØŸÑŸäÿßÿ™ ŸÖÿ™ÿßÿ≠ÿ© ÿ≠ÿßŸÑŸäŸãÿß.\n\nŸÑŸÑÿ±ÿ¨Ÿàÿπ ÿ•ŸÑŸâ ÿßŸÑŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ© ÿßÿ∂ÿ∫ÿ∑ 0"
                    response = {"text": response_text, "keyboard": "0"}
                else:
                    response_text = f"üè• ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿµŸäÿØŸÑŸäÿßÿ™:\nÿßÿÆÿ™ÿ± ÿµŸäÿØŸÑŸäÿ© ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ŸÖÿπŸÑŸàŸÖÿßÿ™:\n"
                    keyboard_items = []
                    for i, pharmacy in enumerate(pharmacies, 1):
                        response_text += f"{i}. {pharmacy.get('name', 'ÿµŸäÿØŸÑŸäÿ© ÿ∫Ÿäÿ± ŸÖÿπÿ±ŸàŸÅÿ©')}\n"
                        keyboard_items.append(f"{pharmacy.get('name', str(i))}")
                    response_text += "\nŸÑŸÑÿ±ÿ¨Ÿàÿπ ÿ•ŸÑŸâ ÿßŸÑŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ© ÿßÿ∂ÿ∫ÿ∑ 0"
                    keyboard = "||".join(keyboard_items) + "||0" if keyboard_items else "0"
                    response = {"text": response_text, "keyboard": keyboard}
            else:
                session_data["state"] = f"service_{selected_service}"
                set_session(user_id, session_data)
                response_text = f"üìã ŸÇÿßÿ¶ŸÖÿ© {selected_service}:\n\nŸáÿ∞Ÿá ÿßŸÑÿÆÿØŸÖÿ© ŸÇŸäÿØ ÿßŸÑÿ™ÿ∑ŸàŸäÿ± ÿ≠ÿßŸÑŸäŸãÿß. ÿ≥ŸÜŸÇŸàŸÖ ÿ®ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿ™ŸÅÿßÿµŸäŸÑ ŸÇÿ±Ÿäÿ®Ÿãÿß.\n\n"
                response_text += "ŸÑŸÑÿ±ÿ¨Ÿàÿπ ÿ•ŸÑŸâ ÿßŸÑŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ© ÿßÿ∂ÿ∫ÿ∑ 0"
                response = {"text": response_text, "keyboard": "0"}
            return response

    # ÿßŸÑÿ™ÿπÿßŸÖŸÑ ŸÖÿπ ÿßÿÆÿ™Ÿäÿßÿ± ÿµŸäÿØŸÑŸäÿ© ŸÖÿπŸäŸÜÿ©
    if current_state == "service_ÿµŸäÿØŸÑŸäÿ©":
        categories = get_categories()
        pharmacies = [cat for cat in categories if "pharmacy" in cat.get("code", "").lower()]
        if not pharmacies:
            response_text = "üè• ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿµŸäÿØŸÑŸäÿßÿ™ ŸÖÿ™ÿßÿ≠ÿ© ÿ≠ÿßŸÑŸäŸãÿß.\n\nŸÑŸÑÿ±ÿ¨Ÿàÿπ ÿ•ŸÑŸâ ÿßŸÑŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ© ÿßÿ∂ÿ∫ÿ∑ 0"
            response = {"text": response_text, "keyboard": "0"}
            session_data["state"] = "main_menu"
            set_session(user_id, session_data)
            return response
        selected_pharmacy = None
        for i, pharmacy in enumerate(pharmacies, 1):
            if message_text == str(i) or pharmacy.get("name", "").lower() in message_text.lower():
                selected_pharmacy = pharmacy
                break
        if selected_pharmacy:
            response_text = f"üè• ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿπŸÜ {selected_pharmacy.get('name', 'ÿµŸäÿØŸÑŸäÿ© ÿ∫Ÿäÿ± ŸÖÿπÿ±ŸàŸÅÿ©')}:\n\n"
            if selected_pharmacy.get("description"):
                response_text += f"{selected_pharmacy['description']}\n\n"
            if selected_pharmacy.get("morning_start_time"):
                response_text += f"‚è∞ ŸÖŸàÿßÿπŸäÿØ ÿßŸÑÿπŸÖŸÑ:\n"
                response_text += f"ÿßŸÑŸÅÿ™ÿ±ÿ© ÿßŸÑÿµÿ®ÿßÿ≠Ÿäÿ©: {selected_pharmacy.get('morning_start_time', 'ÿ∫Ÿäÿ± ŸÖÿ™ŸàŸÅÿ±')} - {selected_pharmacy.get('morning_end_time', 'ÿ∫Ÿäÿ± ŸÖÿ™ŸàŸÅÿ±')}\n"
                response_text += f"ÿßŸÑŸÅÿ™ÿ±ÿ© ÿßŸÑŸÖÿ≥ÿßÿ¶Ÿäÿ©: {selected_pharmacy.get('evening_start_time', 'ÿ∫Ÿäÿ± ŸÖÿ™ŸàŸÅÿ±')} - {selected_pharmacy.get('evening_end_time', 'ÿ∫Ÿäÿ± ŸÖÿ™ŸàŸÅÿ±')}\n"
            response_text += "\nŸÑŸÑÿ±ÿ¨Ÿàÿπ ÿ•ŸÑŸâ ÿßŸÑŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ© ÿßÿ∂ÿ∫ÿ∑ 0"
            response = {"text": response_text, "keyboard": "0"}
            session_data["state"] = "main_menu"
            set_session(user_id, session_data)
            return response
        else:
            response_text = "üè• ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿµŸäÿØŸÑŸäÿßÿ™:\nÿßÿÆÿ™ÿ± ÿµŸäÿØŸÑŸäÿ© ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ŸÖÿπŸÑŸàŸÖÿßÿ™:\n"
            keyboard_items = []
            for i, pharmacy in enumerate(pharmacies, 1):
                response_text += f"{i}. {pharmacy.get('name', 'ÿµŸäÿØŸÑŸäÿ© ÿ∫Ÿäÿ± ŸÖÿπÿ±ŸàŸÅÿ©')}\n"
                keyboard_items.append(f"{pharmacy.get('name', str(i))}")
            response_text += "\nŸÑŸÑÿ±ÿ¨Ÿàÿπ ÿ•ŸÑŸâ ÿßŸÑŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ© ÿßÿ∂ÿ∫ÿ∑ 0"
            keyboard = "||".join(keyboard_items) + "||0" if keyboard_items else "0"
            response = {"text": response_text, "keyboard": keyboard}
            return response

    # ÿßŸÑÿ™ÿπÿßŸÖŸÑ ŸÖÿπ ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑŸÖŸÜÿ®Ÿá
    if current_state == "reminder_menu":
        if message_text == "1":
            session_data["state"] = "awaiting_reminder_date"
            session_data["reminder_type"] = "ŸÖŸàÿπÿØ"
            session_data["interval_days"] = 0
            set_session(user_id, session_data)
            response = {"text": "üìÖ ÿ£ÿ±ÿ≥ŸÑ ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑŸÖŸàÿπÿØ ÿ®ÿßŸÑŸÖŸäŸÑÿßÿØŸä ŸÅŸÇÿ∑:\nŸÖÿ´ŸÑ: 17-08-2025\nŸàÿ≥Ÿäÿ™ŸÖ ÿ™ÿ∞ŸÉŸäÿ±ŸÉ ŸÇÿ®ŸÑ ÿßŸÑŸÖŸàÿπÿØ ÿ®ŸäŸàŸÖ Ÿàÿßÿ≠ÿØ\n\n‚Ü©Ô∏è ŸÑŸÑÿ±ÿ¨Ÿàÿπ (00) | üè† ÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (0)", "keyboard": ""}
        elif message_text == "2":
            session_data["state"] = "awaiting_reminder_date"
            session_data["reminder_type"] = "ŸäŸàŸÖŸä"
            session_data["interval_days"] = 1
            set_session(user_id, session_data)
            response = {"text": "üìÖ ÿ£ÿ±ÿ≥ŸÑ ÿ™ÿßÿ±ŸäÿÆ ÿ®ÿØÿ° ÿßŸÑÿ™ÿ∞ŸÉŸäÿ± ÿßŸÑŸäŸàŸÖŸä ÿ®ÿßŸÑŸÖŸäŸÑÿßÿØŸä:\nŸÖÿ´ŸÑ: 17-08-2025\n\n‚Ü©Ô∏è ŸÑŸÑÿ±ÿ¨Ÿàÿπ (00) | üè† ÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (0)", "keyboard": ""}
        elif message_text == "3":
            session_data["state"] = "awaiting_reminder_date"
            session_data["reminder_type"] = "ÿ£ÿ≥ÿ®ŸàÿπŸä"
            session_data["interval_days"] = 7
            set_session(user_id, session_data)
            response = {"text": "üìÖ ÿ£ÿ±ÿ≥ŸÑ ÿ™ÿßÿ±ŸäÿÆ ÿ®ÿØÿ° ÿßŸÑÿ™ÿ∞ŸÉŸäÿ± ÿßŸÑÿ£ÿ≥ÿ®ŸàÿπŸä ÿ®ÿßŸÑŸÖŸäŸÑÿßÿØŸä:\nŸÖÿ´ŸÑ: 17-08-2025\n\n‚Ü©Ô∏è ŸÑŸÑÿ±ÿ¨Ÿàÿπ (00) | üè† ÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (0)", "keyboard": ""}
        elif message_text == "4":
            reminders = get_current_reminders(user_id)
            if not reminders:
                response = {"text": "üì≠ ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ£Ÿä ÿ™ŸÜÿ®ŸäŸáÿßÿ™ ŸÜÿ¥ÿ∑ÿ© ÿ≠ÿßŸÑŸäŸãÿß.\n\n‚Ü©Ô∏è ŸÑŸÑÿ±ÿ¨Ÿàÿπ (00) | üè† ÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (0)", "keyboard": ""}
            else:
                response_text = "üîî ÿ™ŸÜÿ®ŸäŸáÿßÿ™ŸÉ ÿßŸÑŸÜÿ¥ÿ∑ÿ© ÿßŸÑÿ≠ÿßŸÑŸäÿ©:\n\n"
                for r in reminders:
                    interval_text = f" (Ÿäÿ™ŸÉÿ±ÿ± ŸÉŸÑ {r['interval_days']} ŸäŸàŸÖ)" if r['interval_days'] > 0 else ""
                    response_text += f"{r['id']} - {r['type']}{interval_text} ÿ®ÿ™ÿßÿ±ŸäÿÆ {r['remind_at']}\n"
                response_text += "\nÿßÿÆÿ™ÿ± ÿÆŸäÿßÿ±Ÿãÿß:\n- ÿ£ÿ±ÿ≥ŸÑ 'ÿ≠ÿ∞ŸÅ <ÿ±ŸÇŸÖ>' ŸÑÿ≠ÿ∞ŸÅ ÿ™ÿ∞ŸÉŸäÿ± (ŸÖÿ´ŸÑ: ÿ≠ÿ∞ŸÅ 1)\n- ÿ£ÿ±ÿ≥ŸÑ 'ÿ™ÿπÿØŸäŸÑ <ÿ±ŸÇŸÖ>' ŸÑÿ™ÿπÿØŸäŸÑ ÿ™ÿ∞ŸÉŸäÿ± (ŸÖÿ´ŸÑ: ÿ™ÿπÿØŸäŸÑ 2)\n"
                response_text += "‚Ü©Ô∏è ŸÑŸÑÿ±ÿ¨Ÿàÿπ (00) | üè† ÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (0)"
                response = {"text": response_text, "keyboard": ""}
        elif message_text == "5":
            stats = get_user_stats(user_id)
            response_text = f"üìä *ÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™ŸÉ ÿßŸÑÿ¥ÿÆÿµŸäÿ©:*\n- ÿßŸÑÿ™ÿ∞ŸÉŸäÿ±ÿßÿ™ ÿßŸÑŸÜÿ¥ÿ∑ÿ©: {stats['active_count']}\n- ÿßŸÑÿ™ÿ∞ŸÉŸäÿ±ÿßÿ™ ÿßŸÑŸÖÿ±ÿ≥ŸÑÿ©: {stats['sent_count']}\n\n"
            response_text += "‚Ü©Ô∏è ŸÑŸÑÿ±ÿ¨Ÿàÿπ (00) | üè† ÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (0)"
            response = {"text": response_text, "keyboard": ""}
        elif "ÿ≠ÿ∞ŸÅ" in message_text.lower() and len(message_text.split()) == 1:
            if delete_all_reminders(user_id):
                response = {"text": "‚úÖ ÿ™ŸÖ ÿ≠ÿ∞ŸÅ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ™ÿ∞ŸÉŸäÿ±ÿßÿ™ ÿßŸÑÿÆÿßÿµÿ© ÿ®ŸÉ.\n\n‚Ü©Ô∏è ŸÑŸÑÿ±ÿ¨Ÿàÿπ (00) | üè† ÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (0)", "keyboard": ""}
            else:
                response = {"text": "‚ùå ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ≠ÿ∞ŸÅ ÿßŸÑÿ™ÿ∞ŸÉŸäÿ±ÿßÿ™. ÿ≠ÿßŸàŸÑ ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ.\n\n‚Ü©Ô∏è ŸÑŸÑÿ±ÿ¨Ÿàÿπ (00) | üè† ÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (0)", "keyboard": ""}
        elif message_text.lower().startswith("ÿ≠ÿ∞ŸÅ "):
            try:
                reminder_id = int(message_text.split()[1])
                if delete_reminder(user_id, reminder_id):
                    response = {"text": f"‚úÖ ÿ™ŸÖ ÿ≠ÿ∞ŸÅ ÿßŸÑÿ™ÿ∞ŸÉŸäÿ± ÿ±ŸÇŸÖ {reminder_id} ÿ®ŸÜÿ¨ÿßÿ≠.\n\n‚Ü©Ô∏è ŸÑŸÑÿ±ÿ¨Ÿàÿπ (00) | üè† ÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (0)", "keyboard": ""}
                else:
                    response = {"text": f"‚ùå ÿßŸÑÿ™ÿ∞ŸÉŸäÿ± ÿ±ŸÇŸÖ {reminder_id} ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ ÿ£Ÿà ŸÑÿß ŸäÿÆÿµŸÉ.\n\n‚Ü©Ô∏è ŸÑŸÑÿ±ÿ¨Ÿàÿπ (00) | üè† ÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (0)", "keyboard": ""}
            except (IndexError, ValueError):
                response = {"text": "‚ùå ÿµŸäÿ∫ÿ© ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠ÿ©. ÿ£ÿ±ÿ≥ŸÑ 'ÿ≠ÿ∞ŸÅ <ÿ±ŸÇŸÖ>' ŸÖÿ´ŸÑ: ÿ≠ÿ∞ŸÅ 1\n\n‚Ü©Ô∏è ŸÑŸÑÿ±ÿ¨Ÿàÿπ (00) | üè† ÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (0)", "keyboard": ""}
        elif message_text.lower().startswith("ÿ™ÿπÿØŸäŸÑ "):
            try:
                reminder_id = int(message_text.split()[1])
                session_data["state"] = "awaiting_edit_reminder_date"
                session_data["reminder_id"] = reminder_id
                set_session(user_id, session_data)
                response = {"text": "üìÖ ÿ£ÿØÿÆŸÑ ÿ™ÿßÿ±ŸäÿÆ ÿ¨ÿØŸäÿØ ŸÑŸÑÿ™ÿ∞ŸÉŸäÿ± ÿ®ÿßŸÑŸÖŸäŸÑÿßÿØŸä (ÿ£Ÿà 'ÿ™ÿÆÿ∑Ÿä' ŸÑŸÑÿßÿ≠ÿ™ŸÅÿßÿ∏ ÿ®ÿßŸÑÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿ≠ÿßŸÑŸä):\nŸÖÿ´ŸÑ: 17-08-2025\n\n‚Ü©Ô∏è ŸÑŸÑÿ±ÿ¨Ÿàÿπ (00) | üè† ÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (0)", "keyboard": ""}
            except (IndexError, ValueError):
                response = {"text": "‚ùå ÿµŸäÿ∫ÿ© ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠ÿ©. ÿ£ÿ±ÿ≥ŸÑ 'ÿ™ÿπÿØŸäŸÑ <ÿ±ŸÇŸÖ>' ŸÖÿ´ŸÑ: ÿ™ÿπÿØŸäŸÑ 2\n\n‚Ü©Ô∏è ŸÑŸÑÿ±ÿ¨Ÿàÿπ (00) | üè† ÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (0)", "keyboard": ""}
        else:
            response = {"text": "‚Ü©Ô∏è ÿßÿÆÿ™ÿ± ÿ±ŸÇŸÖ ÿµÿ≠Ÿäÿ≠ ÿ£Ÿà ÿ£ÿ±ÿ≥ŸÑ 'ÿ≠ÿ∞ŸÅ' ŸÑÿ•ÿ≤ÿßŸÑÿ© ÿ¨ŸÖŸäÿπ ÿßŸÑÿ™ŸÜÿ®ŸäŸáÿßÿ™.\n\n‚Ü©Ô∏è ŸÑŸÑÿ±ÿ¨Ÿàÿπ (00) | üè† ÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (0)", "keyboard": ""}
        return response

    # ÿßŸÑÿ™ÿπÿßŸÖŸÑ ŸÖÿπ ÿÆÿ∑Ÿàÿßÿ™ ÿ•ÿπÿØÿßÿØ ÿßŸÑÿ™ÿ∞ŸÉŸäÿ± (ŸÖŸÜÿ®Ÿá)
    if current_state == "awaiting_reminder_date":
        date_str = parse_date(message_text)
        if date_str:
            session_data["date"] = date_str
            session_data["state"] = "awaiting_reminder_time"
            set_session(user_id, session_data)
            response = {"text": "‚è∞ ÿ£ÿØÿÆŸÑ ŸàŸÇÿ™ ÿßŸÑÿ™ÿ∞ŸÉŸäÿ± ÿ®ÿßŸÑÿµŸäÿ∫ÿ© HH:MM (24 ÿ≥ÿßÿπÿ©):\nŸÖÿ´ŸÑ: 15:30\n\n‚Ü©Ô∏è ŸÑŸÑÿ±ÿ¨Ÿàÿπ (00) | üè† ÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (0)", "keyboard": ""}
        else:
            response = {"text": "‚ùóÔ∏è ÿµŸäÿ∫ÿ© ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠ÿ©. ÿ£ÿ±ÿ≥ŸÑ ÿßŸÑÿ™ÿßÿ±ŸäÿÆ ŸÖÿ´ŸÑ: 17-08-2025\n\n‚Ü©Ô∏è ŸÑŸÑÿ±ÿ¨Ÿàÿπ (00) | üè† ÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (0)", "keyboard": ""}
    elif current_state == "awaiting_reminder_time":
        time_str = parse_time(message_text)
        if time_str:
            session_data["time"] = time_str
            session_data["state"] = "awaiting_reminder_message"
            set_session(user_id, session_data)
            response = {"text": "üìù ŸáŸÑ ÿ™ÿ±ŸäÿØ ÿ•ÿ∂ÿßŸÅÿ© ÿ±ÿ≥ÿßŸÑÿ© ŸÖÿÆÿµÿµÿ© ŸÑŸÑÿ™ÿ∞ŸÉŸäÿ±ÿü ÿ•ÿ∞ÿß ŸÑÿßÿå ÿßŸÉÿ™ÿ® 'ŸÑÿß' ÿ£Ÿà 'ÿ™ÿÆÿ∑Ÿä'.", "keyboard": ""}
        else:
            response = {"text": "‚ùóÔ∏è ÿµŸäÿ∫ÿ© ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠ÿ©. ÿ£ÿ±ÿ≥ŸÑ ÿßŸÑŸàŸÇÿ™ ŸÖÿ´ŸÑ: 15:30 ÿ£Ÿà 'ÿ™ÿÆÿ∑Ÿä'\n\n‚Ü©Ô∏è ŸÑŸÑÿ±ÿ¨Ÿàÿπ (00) | üè† ÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (0)", "keyboard": ""}
    elif current_state == "awaiting_reminder_message":
        session_data["message"] = None if message_text in ["ŸÑÿß", "ÿ™ÿÆÿ∑Ÿä", "no", "skip"] else message_text
        session_data["state"] = "awaiting_reminder_interval"
        set_session(user_id, session_data)
        response = {"text": "üîÅ ŸáŸÑ ÿ™ÿ±ŸäÿØ ÿ™ŸÉÿ±ÿßÿ± ÿßŸÑÿ™ÿ∞ŸÉŸäÿ±ÿü (ŸÖÿ´ÿßŸÑ: ŸÉŸÑ ŸäŸàŸÖÿå ŸÉŸÑ 3 ÿ£ŸäÿßŸÖÿå ŸÉŸÑ ÿ£ÿ≥ÿ®Ÿàÿπ)\nÿ•ÿ∞ÿß ŸÑÿßÿå ÿßŸÉÿ™ÿ® 'ŸÑÿß'.", "keyboard": ""}
    elif current_state == "awaiting_reminder_interval":
        interval_days = 0 if message_text in ["ŸÑÿß", "no", "ÿ™ÿÆÿ∑Ÿä", "skip"] else parse_interval_days(message_text)
        reminder_type = session_data.get("reminder_type", "ÿ∫Ÿäÿ± ŸÖÿ≠ÿØÿØ")
        date_str = session_data.get("date", "2023-01-01")
        time_str = session_data.get("time", "00:00")
        remind_at = f"{date_str} {time_str}:00"
        if reminder_type == "ŸÖŸàÿπÿØ":
            date_obj = datetime.strptime(date_str, "%Y-%m-%d")
            remind_at = (date_obj - timedelta(days=1)).strftime("%Y-%m-%d") + f" {time_str}:00"
        message = session_data.get("message")
        if save_reminder(user_id, reminder_type, message, remind_at, interval_days or session_data.get("interval_days", 0)):
            session_data["state"] = "reminder_menu"
            set_session(user_id, session_data)
            interval_text = f"Ÿäÿ™ŸÉÿ±ÿ± ŸÉŸÑ {interval_days or session_data.get('interval_days', 0)} ŸäŸàŸÖ" if (interval_days or session_data.get('interval_days', 0)) > 0 else "ŸÑŸÜ Ÿäÿ™ŸÉÿ±ÿ±"
            response = {"text": f"‚úÖ ÿ™ŸÖ ÿ∂ÿ®ÿ∑ ÿßŸÑÿ™ÿ∞ŸÉŸäÿ± ÿ®ŸÜÿ¨ÿßÿ≠ ŸÑŸÄ '{reminder_type}' ÿ®ÿ™ÿßÿ±ŸäÿÆ {remind_at}\nÿßŸÑÿ™ŸÉÿ±ÿßÿ±: {interval_text}\n\n‚Ü©Ô∏è ŸÑŸÑÿ±ÿ¨Ÿàÿπ (00) | üè† ÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (0)", "keyboard": ""}
        else:
            response = {"text": f"‚ùå ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ∂ÿ®ÿ∑ ÿßŸÑÿ™ÿ∞ŸÉŸäÿ±. ÿ≠ÿßŸàŸÑ ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ.\n\n‚Ü©Ô∏è ŸÑŸÑÿ±ÿ¨Ÿàÿπ (00) | üè† ÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (0)", "keyboard": ""}
    elif current_state == "awaiting_edit_reminder_date":
        reminder_id = session_data.get("reminder_id")
        if message_text.lower() in ["ÿ™ÿÆÿ∑Ÿä", "skip"]:
            session_data["state"] = "awaiting_edit_reminder_time"
            set_session(user_id, session_data)
            response = {"text": "‚è∞ ÿ£ÿØÿÆŸÑ ŸàŸÇÿ™ ÿßŸÑÿ™ÿ∞ŸÉŸäÿ± ÿßŸÑÿ¨ÿØŸäÿØ ÿ®ÿßŸÑÿµŸäÿ∫ÿ© HH:MM (24 ÿ≥ÿßÿπÿ©):\nŸÖÿ´ŸÑ: 15:30 ÿ£Ÿà ÿ£ÿ±ÿ≥ŸÑ 'ÿ™ÿÆÿ∑Ÿä' ŸÑŸÑÿßÿ≠ÿ™ŸÅÿßÿ∏ ÿ®ÿßŸÑŸàŸÇÿ™ ÿßŸÑÿ≠ÿßŸÑŸä\n\n‚Ü©Ô∏è ŸÑŸÑÿ±ÿ¨Ÿàÿπ (00) | üè† ÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (0)", "keyboard": ""}
        else:
            date_str = parse_date(message_text)
            if date_str:
                session_data["date"] = date_str
                session_data["state"] = "awaiting_edit_reminder_time"
                set_session(user_id, session_data)
                response = {"text": "‚è∞ ÿ£ÿØÿÆŸÑ ŸàŸÇÿ™ ÿßŸÑÿ™ÿ∞ŸÉŸäÿ± ÿßŸÑÿ¨ÿØŸäÿØ ÿ®ÿßŸÑÿµŸäÿ∫ÿ© HH:MM (24 ÿ≥ÿßÿπÿ©):\nŸÖÿ´ŸÑ: 15:30 ÿ£Ÿà ÿ£ÿ±ÿ≥ŸÑ 'ÿ™ÿÆÿ∑Ÿä' ŸÑŸÑÿßÿ≠ÿ™ŸÅÿßÿ∏ ÿ®ÿßŸÑŸàŸÇÿ™ ÿßŸÑÿ≠ÿßŸÑŸä\n\n‚Ü©Ô∏è ŸÑŸÑÿ±ÿ¨Ÿàÿπ (00) | üè† ÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (0)", "keyboard": ""}
            else:
                response = {"text": "‚ùóÔ∏è ÿµŸäÿ∫ÿ© ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠ÿ©. ÿ£ÿ±ÿ≥ŸÑ ÿßŸÑÿ™ÿßÿ±ŸäÿÆ ŸÖÿ´ŸÑ: 17-08-2025 ÿ£Ÿà 'ÿ™ÿÆÿ∑Ÿä'\n\n‚Ü©Ô∏è ŸÑŸÑÿ±ÿ¨Ÿàÿπ (00) | üè† ÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (0)", "keyboard": ""}
    elif current_state == "awaiting_edit_reminder_time":
        reminder_id = session_data.get("reminder_id")
        if message_text.lower() in ["ÿ™ÿÆÿ∑Ÿä", "skip"]:
            session_data["state"] = "awaiting_edit_reminder_message"
            set_session(user_id, session_data)
            response = {"text": "üìù ÿ£ÿØÿÆŸÑ ÿ±ÿ≥ÿßŸÑÿ© ŸÖÿÆÿµÿµÿ© ÿ¨ÿØŸäÿØÿ© ŸÑŸÑÿ™ÿ∞ŸÉŸäÿ± (ÿßÿÆÿ™Ÿäÿßÿ±Ÿäÿå ÿ£ÿ±ÿ≥ŸÑ 'ÿ™ÿÆÿ∑Ÿä' ŸÑŸÑÿßÿ≠ÿ™ŸÅÿßÿ∏ ÿ®ÿßŸÑÿ±ÿ≥ÿßŸÑÿ© ÿßŸÑÿ≠ÿßŸÑŸäÿ©):\nŸÖÿ´ŸÑ: ŸÑÿß ÿ™ŸÜÿ≥Ÿé ÿ≤Ÿäÿßÿ±ÿ© ÿßŸÑÿ∑ÿ®Ÿäÿ®\n\n‚Ü©Ô∏è ŸÑŸÑÿ±ÿ¨Ÿàÿπ (00) | üè† ÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (0)", "keyboard": ""}
        else:
            time_str = parse_time(message_text)
