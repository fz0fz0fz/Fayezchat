# Check.db.py
import sqlite3
import os
import logging

# ุชููุฆุฉ ุงูุณุฌู (Logging)
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# ูุณุงุฑุงุช ููุงุนุฏ ุงูุจูุงูุงุช ุงููุณุชุฎุฏูุฉ ูู ุงููุดุฑูุน
REMINDERS_DB_PATH = "reminders.db"
SESSIONS_DB_PATH = "sessions.db"
SERVICES_DB_PATH = "services.db"

def check_and_init_databases():
    """
    ุงูุชุญูู ูู ูุฌูุฏ ููุงุนุฏ ุงูุจูุงูุงุช ุงููุทููุจุฉ ูุฅูุดุงุฆูุง ุฅู ูู ุชูู ููุฌูุฏุฉ.
    """
    try:
        # ุงูุชุญูู ูู reminders.db (ููุชุฐููุฑุงุช)
        if not os.path.exists(REMINDERS_DB_PATH):
            conn = sqlite3.connect(REMINDERS_DB_PATH)
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS reminders (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id TEXT NOT NULL,
                    type TEXT NOT NULL,
                    message TEXT,
                    remind_at TEXT NOT NULL,
                    interval_days INTEGER DEFAULT 0,
                    active INTEGER DEFAULT 1
                )
            ''')
            conn.commit()
            logging.info(f"โ ุชู ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช {REMINDERS_DB_PATH}.")
            conn.close()
        else:
            logging.info(f"๐ข ูุงุนุฏุฉ ุงูุจูุงูุงุช {REMINDERS_DB_PATH} ููุฌูุฏุฉ ุจุงููุนู.")

        # ุงูุชุญูู ูู sessions.db (ููุฌูุณุงุช)
        if not os.path.exists(SESSIONS_DB_PATH):
            conn = sqlite3.connect(SESSIONS_DB_PATH)
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS sessions (
                    user_id TEXT PRIMARY KEY,
                    state TEXT
                )
            ''')
            conn.commit()
            logging.info(f"โ ุชู ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช {SESSIONS_DB_PATH}.")
            conn.close()
        else:
            logging.info(f"๐ข ูุงุนุฏุฉ ุงูุจูุงูุงุช {SESSIONS_DB_PATH} ููุฌูุฏุฉ ุจุงููุนู.")

        # ุงูุชุญูู ูู services.db (ููุฎุฏูุงุช ูุซู ุงูุตูุฏููุงุช)
        if not os.path.exists(SERVICES_DB_PATH):
            conn = sqlite3.connect(SERVICES_DB_PATH)
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS categories (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    code TEXT UNIQUE NOT NULL,
                    name TEXT NOT NULL,
                    description TEXT,
                    morning_start_time TEXT,
                    morning_end_time TEXT,
                    evening_start_time TEXT,
                    evening_end_time TEXT
                )
            ''')
            conn.commit()
            logging.info(f"โ ุชู ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช {SERVICES_DB_PATH}.")
            conn.close()
        else:
            logging.info(f"๐ข ูุงุนุฏุฉ ุงูุจูุงูุงุช {SERVICES_DB_PATH} ููุฌูุฏุฉ ุจุงููุนู.")

        return True
    except Exception as e:
        logging.error(f"โ ุฎุทุฃ ุฃุซูุงุก ุงูุชุญูู ูู ููุงุนุฏ ุงูุจูุงูุงุช: {e}")
        return False

if __name__ == "__main__":
    if check_and_init_databases():
        print("โ ุฌููุน ููุงุนุฏ ุงูุจูุงูุงุช ุฌุงูุฒุฉ ููุงุณุชุฎุฏุงู.")
    else:
        print("โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงูุชุญูู ูู ููุงุนุฏ ุงูุจูุงูุงุช.")
